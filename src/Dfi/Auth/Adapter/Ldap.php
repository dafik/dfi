<?php

namespace Dfi\Auth\Adapter;

use Dfi\Ldap as DfiLdap;
use Zend_Auth_Adapter_Ldap;
use Zend_Ldap;
use Zend_Translate;

class Ldap extends Zend_Auth_Adapter_Ldap implements AdapterInterface
{

    /**
     * Returns the LDAP Object
     *
     * @return DfiLdap The Zend_Ldap object used to authenticate the credentials
     */
    public function getLdap()
    {
        if ($this->_ldap === null) {
            /**
             * @see Zend_Ldap
             */
            // require_once 'Zend/Ldap.php';
            $this->_ldap = new DfiLdap();
        }

        return $this->_ldap;
    }

    public static function canChangePassword()
    {
        return false;
    }

    public function __construct(array $options = array(), $username = null, $password = null)
    {
        $options = DfiLdap\Config::getConfig(true, 'ldap.servers');
        parent::__construct($options, $username, $password); // TODO: Change the autogenerated stub
    }

    public function changePassword($currentPassword, $newPassword)
    {
        return false;
    }

    public function setTranslator(Zend_Translate $translator)
    {
        $this->translator = $translator;
    }

    public function authenticate()
    {
        $result = parent::authenticate();
        if ($result->getCode() < 1) {
            AdExtendedCodes::checkExtended($result);
        }

        return $result;
    }

    public static function isUsingPasswordHasher()
    {
        return false;
    }

    public static function canChangePasswordBySelf()
    {
        return false;
    }
}
